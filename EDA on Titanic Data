{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "812c36df",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:39.340329Z",
     "iopub.status.busy": "2024-06-24T16:12:39.339868Z",
     "iopub.status.idle": "2024-06-24T16:12:40.349995Z",
     "shell.execute_reply": "2024-06-24T16:12:40.348590Z"
    },
    "papermill": {
     "duration": 1.027158,
     "end_time": "2024-06-24T16:12:40.352931",
     "exception": false,
     "start_time": "2024-06-24T16:12:39.325773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "04a9eaed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:40.380191Z",
     "iopub.status.busy": "2024-06-24T16:12:40.379626Z",
     "iopub.status.idle": "2024-06-24T16:12:41.951997Z",
     "shell.execute_reply": "2024-06-24T16:12:41.950600Z"
    },
    "papermill": {
     "duration": 1.589578,
     "end_time": "2024-06-24T16:12:41.955023",
     "exception": false,
     "start_time": "2024-06-24T16:12:40.365445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf1fa84b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:41.981246Z",
     "iopub.status.busy": "2024-06-24T16:12:41.980804Z",
     "iopub.status.idle": "2024-06-24T16:12:42.004680Z",
     "shell.execute_reply": "2024-06-24T16:12:42.003429Z"
    },
    "papermill": {
     "duration": 0.040569,
     "end_time": "2024-06-24T16:12:42.007922",
     "exception": false,
     "start_time": "2024-06-24T16:12:41.967353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=pd.read_csv('/kaggle/input/titanic/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b2daf95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:42.034771Z",
     "iopub.status.busy": "2024-06-24T16:12:42.034328Z",
     "iopub.status.idle": "2024-06-24T16:12:42.069106Z",
     "shell.execute_reply": "2024-06-24T16:12:42.067878Z"
    },
    "papermill": {
     "duration": 0.051683,
     "end_time": "2024-06-24T16:12:42.072133",
     "exception": false,
     "start_time": "2024-06-24T16:12:42.020450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07b19099",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:42.099096Z",
     "iopub.status.busy": "2024-06-24T16:12:42.098668Z",
     "iopub.status.idle": "2024-06-24T16:12:42.106561Z",
     "shell.execute_reply": "2024-06-24T16:12:42.105247Z"
    },
    "papermill": {
     "duration": 0.024437,
     "end_time": "2024-06-24T16:12:42.109201",
     "exception": false,
     "start_time": "2024-06-24T16:12:42.084764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "01be231f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:42.136323Z",
     "iopub.status.busy": "2024-06-24T16:12:42.135888Z",
     "iopub.status.idle": "2024-06-24T16:12:42.148156Z",
     "shell.execute_reply": "2024-06-24T16:12:42.146958Z"
    },
    "papermill": {
     "duration": 0.029153,
     "end_time": "2024-06-24T16:12:42.151030",
     "exception": false,
     "start_time": "2024-06-24T16:12:42.121877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60482c61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:42.178347Z",
     "iopub.status.busy": "2024-06-24T16:12:42.177928Z",
     "iopub.status.idle": "2024-06-24T16:12:42.205401Z",
     "shell.execute_reply": "2024-06-24T16:12:42.204022Z"
    },
    "papermill": {
     "duration": 0.044258,
     "end_time": "2024-06-24T16:12:42.208078",
     "exception": false,
     "start_time": "2024-06-24T16:12:42.163820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
       "0          False     False   False  False  False  False  False  False   False   \n",
       "1          False     False   False  False  False  False  False  False   False   \n",
       "2          False     False   False  False  False  False  False  False   False   \n",
       "3          False     False   False  False  False  False  False  False   False   \n",
       "4          False     False   False  False  False  False  False  False   False   \n",
       "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
       "886        False     False   False  False  False  False  False  False   False   \n",
       "887        False     False   False  False  False  False  False  False   False   \n",
       "888        False     False   False  False  False   True  False  False   False   \n",
       "889        False     False   False  False  False  False  False  False   False   \n",
       "890        False     False   False  False  False  False  False  False   False   \n",
       "\n",
       "      Fare  Cabin  Embarked  \n",
       "0    False   True     False  \n",
       "1    False  False     False  \n",
       "2    False   True     False  \n",
       "3    False  False     False  \n",
       "4    False   True     False  \n",
       "..     ...    ...       ...  \n",
       "886  False   True     False  \n",
       "887  False  False     False  \n",
       "888  False   True     False  \n",
       "889  False  False     False  \n",
       "890  False   True     False  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e34c9e9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:42.237415Z",
     "iopub.status.busy": "2024-06-24T16:12:42.237004Z",
     "iopub.status.idle": "2024-06-24T16:12:43.025328Z",
     "shell.execute_reply": "2024-06-24T16:12:43.023973Z"
    },
    "papermill": {
     "duration": 0.805633,
     "end_time": "2024-06-24T16:12:43.028028",
     "exception": false,
     "start_time": "2024-06-24T16:12:42.222395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),color='r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "befede12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:43.058317Z",
     "iopub.status.busy": "2024-06-24T16:12:43.057902Z",
     "iopub.status.idle": "2024-06-24T16:12:43.303024Z",
     "shell.execute_reply": "2024-06-24T16:12:43.301693Z"
    },
    "papermill": {
     "duration": 0.263319,
     "end_time": "2024-06-24T16:12:43.305686",
     "exception": false,
     "start_time": "2024-06-24T16:12:43.042367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('ticks')\n",
    "sns.countplot(x='Survived',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0ee906d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:43.337827Z",
     "iopub.status.busy": "2024-06-24T16:12:43.336815Z",
     "iopub.status.idle": "2024-06-24T16:12:43.559275Z",
     "shell.execute_reply": "2024-06-24T16:12:43.557903Z"
    },
    "papermill": {
     "duration": 0.241994,
     "end_time": "2024-06-24T16:12:43.562310",
     "exception": false,
     "start_time": "2024-06-24T16:12:43.320316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('ticks')\n",
    "sns.countplot(x='Survived',hue='Sex',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fcaa2230",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:43.596957Z",
     "iopub.status.busy": "2024-06-24T16:12:43.596487Z",
     "iopub.status.idle": "2024-06-24T16:12:43.954417Z",
     "shell.execute_reply": "2024-06-24T16:12:43.953203Z"
    },
    "papermill": {
     "duration": 0.379642,
     "end_time": "2024-06-24T16:12:43.957179",
     "exception": false,
     "start_time": "2024-06-24T16:12:43.577537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAGwCAYAAABPSaTdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAx9klEQVR4nO3de1xVdb7/8Td7AwKCKBdTzNREtzcETI+CGGNj1ng5c9TMGo/mZKmpaeUFj5mCGmCRo5VdRs3jJbVmHJ20i6NTevJEah3JyyjmFU0bLuYlQIHN/v3Rz93svHFfm+Xr+Xjsx4O11net72cJC9+s9V1reTgcDocAAABMymJ0AQAAANWJsAMAAEyNsAMAAEyNsAMAAEyNsAMAAEyNsAMAAEyNsAMAAEzN0+gC3EFpaalKSkpksVjk4eFhdDkAAKAMHA6HSktL5enpKYvlxudvCDuSSkpKtG/fPqPLAAAAFRARESFvb+8bLifsSM40GBERIavVanA1AACgLOx2u/bt23fTszoSYUeSnJeurFYrYQcAgFrmVkNQGKAMAABMjbADAABMjbADAABMjTE7AADUYna7XcXFxUaXUS28vLyqZCwtYQcAgFrI4XDo+++/1/nz540upVrVr19fjRo1qtRz8Ag7AADUQleDTsOGDeXn52e6h+I6HA4VFBQoOztbktS4ceMKb4uwAwBALWO3251BJzg42Ohyqo2vr68kKTs7Ww0bNqzwJS0GKAMAUMtcHaPj5+dncCXV7+o+VmZcEmEHAIBaymyXrq6nKvaRsAMAAEyNsAMAAEyNsAMAAK4xbNgwvfjii0aXUSW4GwsAAJOaNm2a1q9fL+mnB/Q1btxYv/3tbzVmzBh5et4+EeD22VMAAG5DPXr0UEpKioqKirR9+3bNnj1bXl5eGj16tNGl1RguYwEAYGLe3t4KDQ1VkyZN9Lvf/U6xsbH69NNPJUlff/21hg0bpsjISHXp0kUjR47UhQsXrrudDRs2aODAgYqOjlb37t01adIk5eXlOZdfuHBBkyZNUrdu3dSxY0f17t1b69atkyQVFRVp9uzZiouLU0REhHr27Km33367+nf+/+PMDmAQe6ldVkvl3/lS2/HvANSsOnXq6Pz58zp48KBGjBihQYMG6fnnn5fVatXOnTtlt9uvu15JSYkmTpyou+++W3l5eUpNTdW0adO0ePFiSdLChQt19OhRLV68WA0aNFBWVpYuX74sSVq5cqU+/fRTLViwQI0bN9bZs2f1/fff19g+E3YAg1gtViVtTtKJH04YXYphmjdorlkPzDK6DOC24HA4lJ6erh07dug///M/tWTJEnXo0EGJiYnONq1atbrh+g899JDz66ZNm+r555/XQw89pPz8fNWtW1dnzpxR27ZtFRERIUm68847ne3Pnj2rZs2a6Z577pGHh4eaNGlS9Tt4E4QdwEAnfjihwzmHjS4DgIlt27ZN0dHRKi4ulsPhUL9+/fT000/roYce0oMPPljm7ezfv1+vv/66Dh06pAsXLsjhcEj6KciEh4fr0Ucf1YQJE/SPf/xD3bt3V69evdSpUydJ0oABA/T444/rwQcfVI8ePfSrX/1KcXFx1bK/10PYAQDAxLp27arExER5eXmpYcOGzruwfHx8yryNgoICjRw5UnFxcUpLS1ODBg109uxZjRw50vkah/j4eH322Wfavn27/vd//1cjRozQ0KFDlZCQoPbt2+vvf/+7/ud//kdffPGFnnnmGcXGxurVV1+tln3+JQYoAwBgYr6+vmrWrJnCwsJcbje32WxKT08v0zaOHTum8+fPa/LkyercubNatmzpMjj5qqCgIA0YMEBpaWmaPn263nvvPecyf39/9enTR3PnztUf/vAHbd68WefPn6/0/pUFZ3YAALgNjRo1Sv3791diYqIeeeQReXl5aefOnXrwwQcVFBTk0jYsLExeXl5auXKlHn30UR0+fFhvvPGGS5uFCxeqffv2atWqlYqKirRt2za1bNlSkrRs2TKFhoaqbdu2slgs+uSTTxQaGqp69erVyL4SdgAAuA21aNFC77zzjubPn6/BgwfLx8dHHTt2VL9+/a5pGxQUpNTUVM2fP18rV65U+/btlZCQoKeeesrZxsvLS/Pnz9d3330nHx8f3XPPPZo/f74kqW7dulqyZIlOnjwpi8WiiIgI/fGPf5TFUjMXmDwcV0cY3cbsdrsyMjIUFRUlq5VbYFFzfr/297f1AOXWoa217JFlRpcB1DqXL1/W8ePH1aJFi3KNvamNbravZf3/mzE7AADA1Ag7AADA1Ag7AADA1Ag7AADA1Ag7AADA1Ag7AADA1Ag7AADA1Ag7AADA1Ag7AADA1AwNO6tXr1b//v3VqVMnderUSUOGDNH27dudy4cNGyab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oaGhFeoDQO3GZSwANebixYv66quvNHnyZHXr1k1NmjRRx44dNXr0aP3617/W6dOnZbPZdPDgQZd1bDabdu7cKenny1Hbt2/XwIEDFRERoXXr1slms+no0aMu/f33f/+3evXq5bLexYsX9eOPP6pjx47avn27S/stW7YoOjpahYWFkqSzZ89q4sSJ6ty5s/7t3/5NTz31lE6fPu1sb7fblZKSos6dO6tr16566aWXxOsGAfdD2AFQY/z8/OTn56etW7eqqKioUtt65ZVXNGnSJH300Ud64IEH1KFDB23cuNGlzQcffKB+/fpds66/v79+9atfadOmTS7zN27cqF69esnX11fFxcUaOXKk6tatq3fffVdr1qyRn5+fnnjiCWft77zzjtavX6/k5GStXr1aFy5c0JYtWyq1XwCqHmEHQI3x9PRUamqqNmzYoM6dO+uRRx7R/PnzdejQoXJva8KECerevbvuuusu1a9fX/3799eHH37oXH78+HEdOHBA/fv3v+76//7v/66tW7c6z+L8+OOP2rZtm7P9Rx99pNLSUr344ouy2Wxq2bKlUlJSdPbsWe3atUuStHz5co0aNUq9e/dWy5YtlZSUxJggwA0RdgDUqAceeECff/653nzzTfXo0UO7du3SwIED9Ze//KVc24mIiHCZ7tu3r7777jtlZGRI+uksTfv27dWyZcvrrn/vvffKy8tLn376qSRp8+bN8vf3V2xsrCTp0KFDysrKUqdOnRQdHa3o6Gh17dpVV65cUVZWli5duqScnBxFRkY6t+np6akOHTqUaz8AVD8GKAOocXXq1FH37t3VvXt3jRs3Ts8//7xee+01vfvuu5LkMu6lpKTkutvw9fV1mQ4NDVW3bt20adMmRUVFadOmTXr00UdvWIO3t7ceeOABbdy4UX379tWmTZvUp08f50DngoICtW/fXmlpadesGxQUVO59BmAczuwAMFx4eLgKCgqcISInJ8e57F8HK99K//799dFHH2nPnj06deqU+vTpc8v2O3bs0Lfffqsvv/zS5ZJX+/btdfLkSQUHB6tZs2Yun4CAAAUEBCg0NFTffPONc52SkhIdOHCgzPUCqBmEHQA15ocfftDw4cP117/+VYcOHdKpU6f08ccfa8mSJfr1r38tHx8fRUVF6Y9//KOOHj2qXbt2acGCBWXe/v3336/8/HwlJiaqa9euuuOOO27avkuXLgoJCdHkyZN15513ulyS6t+/vxo0aKCnnnpKX331lU6dOqWdO3dq7ty5+v777yVJw4cP1+LFi7V161YdPXpUSUlJ1f7QQgDlx2UsADWmbt26ioyM1PLly5WVlaWSkhI1atRIgwcP1pgxYyRJycnJev755zVw4EC1aNFCU6ZM0eOPP16m7fv7+6tnz576+OOPlZycfMv2Hh4e6tu3r5YsWaJx48a5LPP19dWqVauUlpam8ePHKz8/X3fccYdiYmLk7+8vSXr88ceVk5OjhIQEWSwWDRo0SPfff78uXbpUzn8ZANXJw8FDIQAAgIlxGQsAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJgaYQcAAJja/wNbFg6eiXdDzwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('whitegrid')\n",
    "sns.countplot(x='Survived',hue='Pclass',data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6b8b87e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:43.992266Z",
     "iopub.status.busy": "2024-06-24T16:12:43.990976Z",
     "iopub.status.idle": "2024-06-24T16:12:44.501056Z",
     "shell.execute_reply": "2024-06-24T16:12:44.499787Z"
    },
    "papermill": {
     "duration": 0.530793,
     "end_time": "2024-06-24T16:12:44.504287",
     "exception": false,
     "start_time": "2024-06-24T16:12:43.973494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/2780493860.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train['Age'].dropna(),kde=False,bins=40,color='red')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Age'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Age'].dropna(),kde=False,bins=40,color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "de363553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:44.539776Z",
     "iopub.status.busy": "2024-06-24T16:12:44.539362Z",
     "iopub.status.idle": "2024-06-24T16:12:44.908289Z",
     "shell.execute_reply": "2024-06-24T16:12:44.906744Z"
    },
    "papermill": {
     "duration": 0.389688,
     "end_time": "2024-06-24T16:12:44.911179",
     "exception": false,
     "start_time": "2024-06-24T16:12:44.521491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='SibSp', ylabel='count'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('darkgrid')\n",
    "sns.countplot(x='SibSp',data=train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4a102c2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:44.948836Z",
     "iopub.status.busy": "2024-06-24T16:12:44.948409Z",
     "iopub.status.idle": "2024-06-24T16:12:45.332537Z",
     "shell.execute_reply": "2024-06-24T16:12:45.331100Z"
    },
    "papermill": {
     "duration": 0.406203,
     "end_time": "2024-06-24T16:12:45.335330",
     "exception": false,
     "start_time": "2024-06-24T16:12:44.929127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Fare'].hist(color='red',bins=20,figsize=(8,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1fc2d4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:45.372467Z",
     "iopub.status.busy": "2024-06-24T16:12:45.372018Z",
     "iopub.status.idle": "2024-06-24T16:12:45.737696Z",
     "shell.execute_reply": "2024-06-24T16:12:45.736188Z"
    },
    "papermill": {
     "duration": 0.387418,
     "end_time": "2024-06-24T16:12:45.740536",
     "exception": false,
     "start_time": "2024-06-24T16:12:45.353118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Pclass', ylabel='Age'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 7))\n",
    "sns.boxplot(x='Pclass',y='Age',data=train,palette='winter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fcd03641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:45.778223Z",
     "iopub.status.busy": "2024-06-24T16:12:45.777791Z",
     "iopub.status.idle": "2024-06-24T16:12:45.784459Z",
     "shell.execute_reply": "2024-06-24T16:12:45.783325Z"
    },
    "papermill": {
     "duration": 0.028394,
     "end_time": "2024-06-24T16:12:45.786904",
     "exception": false,
     "start_time": "2024-06-24T16:12:45.758510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def impute_age(cols):\n",
    "  Age=cols[0]\n",
    "  Pclass=cols[1]\n",
    "  if pd.isnull(Age):\n",
    "    if Pclass==1:\n",
    "      return 37\n",
    "    elif Pclass==2:\n",
    "      return 28\n",
    "    else:\n",
    "      return 24\n",
    "  else:\n",
    "      return Age\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8dab9282",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:45.829626Z",
     "iopub.status.busy": "2024-06-24T16:12:45.829207Z",
     "iopub.status.idle": "2024-06-24T16:12:45.885740Z",
     "shell.execute_reply": "2024-06-24T16:12:45.884449Z"
    },
    "papermill": {
     "duration": 0.083928,
     "end_time": "2024-06-24T16:12:45.888603",
     "exception": false,
     "start_time": "2024-06-24T16:12:45.804675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/700782006.py:2: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  Age=cols[0]\n",
      "/tmp/ipykernel_18/700782006.py:3: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  Pclass=cols[1]\n"
     ]
    }
   ],
   "source": [
    "train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fb81a2f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:45.926788Z",
     "iopub.status.busy": "2024-06-24T16:12:45.926348Z",
     "iopub.status.idle": "2024-06-24T16:12:46.307280Z",
     "shell.execute_reply": "2024-06-24T16:12:46.306103Z"
    },
    "papermill": {
     "duration": 0.402878,
     "end_time": "2024-06-24T16:12:46.309912",
     "exception": false,
     "start_time": "2024-06-24T16:12:45.907034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False, color='r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ecf9e222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.348657Z",
     "iopub.status.busy": "2024-06-24T16:12:46.348246Z",
     "iopub.status.idle": "2024-06-24T16:12:46.356502Z",
     "shell.execute_reply": "2024-06-24T16:12:46.355331Z"
    },
    "papermill": {
     "duration": 0.031052,
     "end_time": "2024-06-24T16:12:46.359424",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.328372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.drop('Cabin',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "136de523",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.398237Z",
     "iopub.status.busy": "2024-06-24T16:12:46.397797Z",
     "iopub.status.idle": "2024-06-24T16:12:46.407334Z",
     "shell.execute_reply": "2024-06-24T16:12:46.406244Z"
    },
    "papermill": {
     "duration": 0.032115,
     "end_time": "2024-06-24T16:12:46.410099",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.377984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Embarked = pd.get_dummies(train['Embarked'],drop_first=True).astype(int)\n",
    "sex = pd.get_dummies(train['Sex'],drop_first=True).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "613065c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.449413Z",
     "iopub.status.busy": "2024-06-24T16:12:46.448975Z",
     "iopub.status.idle": "2024-06-24T16:12:46.455988Z",
     "shell.execute_reply": "2024-06-24T16:12:46.454687Z"
    },
    "papermill": {
     "duration": 0.029687,
     "end_time": "2024-06-24T16:12:46.458576",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.428889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.drop(['Sex','Embarked','Name','Ticket'],inplace = True, axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "09a5d16c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.498913Z",
     "iopub.status.busy": "2024-06-24T16:12:46.498433Z",
     "iopub.status.idle": "2024-06-24T16:12:46.514202Z",
     "shell.execute_reply": "2024-06-24T16:12:46.512959Z"
    },
    "papermill": {
     "duration": 0.039315,
     "end_time": "2024-06-24T16:12:46.516741",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.477426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare\n",
       "0            1         0       3  22.0      1      0   7.2500\n",
       "1            2         1       1  38.0      1      0  71.2833\n",
       "2            3         1       3  26.0      0      0   7.9250\n",
       "3            4         1       1  35.0      1      0  53.1000\n",
       "4            5         0       3  35.0      0      0   8.0500"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "df2a66ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.556346Z",
     "iopub.status.busy": "2024-06-24T16:12:46.555873Z",
     "iopub.status.idle": "2024-06-24T16:12:46.562714Z",
     "shell.execute_reply": "2024-06-24T16:12:46.561445Z"
    },
    "papermill": {
     "duration": 0.029728,
     "end_time": "2024-06-24T16:12:46.565512",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.535784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.concat([train,sex,Embarked],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4f787846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.606360Z",
     "iopub.status.busy": "2024-06-24T16:12:46.604892Z",
     "iopub.status.idle": "2024-06-24T16:12:46.623399Z",
     "shell.execute_reply": "2024-06-24T16:12:46.622199Z"
    },
    "papermill": {
     "duration": 0.041667,
     "end_time": "2024-06-24T16:12:46.626185",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.584518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass   Age  SibSp  Parch     Fare  male  Q  S\n",
       "0            1         0       3  22.0      1      0   7.2500     1  0  1\n",
       "1            2         1       1  38.0      1      0  71.2833     0  0  0\n",
       "2            3         1       3  26.0      0      0   7.9250     0  0  1\n",
       "3            4         1       1  35.0      1      0  53.1000     0  0  1\n",
       "4            5         0       3  35.0      0      0   8.0500     1  0  1"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3e42b61",
   "metadata": {
    "papermill": {
     "duration": 0.01917,
     "end_time": "2024-06-24T16:12:46.666136",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.646966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Applying Prediction **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "869e7042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.706513Z",
     "iopub.status.busy": "2024-06-24T16:12:46.706063Z",
     "iopub.status.idle": "2024-06-24T16:12:46.724615Z",
     "shell.execute_reply": "2024-06-24T16:12:46.723357Z"
    },
    "papermill": {
     "duration": 0.041817,
     "end_time": "2024-06-24T16:12:46.727474",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.685657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>male</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass   Age  SibSp  Parch     Fare  male  Q  S\n",
       "0            1       3  22.0      1      0   7.2500     1  0  1\n",
       "1            2       1  38.0      1      0  71.2833     0  0  0\n",
       "2            3       3  26.0      0      0   7.9250     0  0  1\n",
       "3            4       1  35.0      1      0  53.1000     0  0  1\n",
       "4            5       3  35.0      0      0   8.0500     1  0  1"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.drop('Survived',axis = 1).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c2f66d5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.772176Z",
     "iopub.status.busy": "2024-06-24T16:12:46.771106Z",
     "iopub.status.idle": "2024-06-24T16:12:46.779612Z",
     "shell.execute_reply": "2024-06-24T16:12:46.778521Z"
    },
    "papermill": {
     "duration": 0.034985,
     "end_time": "2024-06-24T16:12:46.782101",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.747116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    1\n",
       "3    1\n",
       "4    0\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Survived'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a34d6572",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:46.825669Z",
     "iopub.status.busy": "2024-06-24T16:12:46.824789Z",
     "iopub.status.idle": "2024-06-24T16:12:47.166063Z",
     "shell.execute_reply": "2024-06-24T16:12:47.164863Z"
    },
    "papermill": {
     "duration": 0.367079,
     "end_time": "2024-06-24T16:12:47.169115",
     "exception": false,
     "start_time": "2024-06-24T16:12:46.802036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "42f48e46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.273652Z",
     "iopub.status.busy": "2024-06-24T16:12:47.273241Z",
     "iopub.status.idle": "2024-06-24T16:12:47.285936Z",
     "shell.execute_reply": "2024-06-24T16:12:47.284653Z"
    },
    "papermill": {
     "duration": 0.100364,
     "end_time": "2024-06-24T16:12:47.288872",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.188508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train , X_test , Y_train , Y_test = train_test_split(train.drop('Survived',axis=1),\n",
    "                                                       train['Survived'],test_size=0.30,random_state=101)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1312ea65",
   "metadata": {
    "papermill": {
     "duration": 0.01905,
     "end_time": "2024-06-24T16:12:47.327323",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.308273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Training And Predicting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "210b8f65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.368724Z",
     "iopub.status.busy": "2024-06-24T16:12:47.368250Z",
     "iopub.status.idle": "2024-06-24T16:12:47.480394Z",
     "shell.execute_reply": "2024-06-24T16:12:47.479151Z"
    },
    "papermill": {
     "duration": 0.137269,
     "end_time": "2024-06-24T16:12:47.483886",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.346617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score , confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d502cc55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.525650Z",
     "iopub.status.busy": "2024-06-24T16:12:47.525117Z",
     "iopub.status.idle": "2024-06-24T16:12:47.570955Z",
     "shell.execute_reply": "2024-06-24T16:12:47.569685Z"
    },
    "papermill": {
     "duration": 0.069886,
     "end_time": "2024-06-24T16:12:47.573982",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.504096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9b8dcb4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.615605Z",
     "iopub.status.busy": "2024-06-24T16:12:47.615145Z",
     "iopub.status.idle": "2024-06-24T16:12:47.623058Z",
     "shell.execute_reply": "2024-06-24T16:12:47.621729Z"
    },
    "papermill": {
     "duration": 0.031897,
     "end_time": "2024-06-24T16:12:47.625754",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.593857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "eb3d779a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.669248Z",
     "iopub.status.busy": "2024-06-24T16:12:47.668767Z",
     "iopub.status.idle": "2024-06-24T16:12:47.677653Z",
     "shell.execute_reply": "2024-06-24T16:12:47.676377Z"
    },
    "papermill": {
     "duration": 0.032978,
     "end_time": "2024-06-24T16:12:47.680116",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.647138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7686567164179104\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(Y_test, predictions)\n",
    "print(f'Accuracy: {accuracy}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cd52b3ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.723973Z",
     "iopub.status.busy": "2024-06-24T16:12:47.723369Z",
     "iopub.status.idle": "2024-06-24T16:12:47.731440Z",
     "shell.execute_reply": "2024-06-24T16:12:47.730124Z"
    },
    "papermill": {
     "duration": 0.033447,
     "end_time": "2024-06-24T16:12:47.734574",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.701127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "acc = confusion_matrix(Y_test, predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "95435c36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.778237Z",
     "iopub.status.busy": "2024-06-24T16:12:47.777339Z",
     "iopub.status.idle": "2024-06-24T16:12:47.785118Z",
     "shell.execute_reply": "2024-06-24T16:12:47.783863Z"
    },
    "papermill": {
     "duration": 0.032436,
     "end_time": "2024-06-24T16:12:47.787805",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.755369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[134,  20],\n",
       "       [ 42,  72]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "941c2b4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-24T16:12:47.832976Z",
     "iopub.status.busy": "2024-06-24T16:12:47.831790Z",
     "iopub.status.idle": "2024-06-24T16:12:47.841029Z",
     "shell.execute_reply": "2024-06-24T16:12:47.839914Z"
    },
    "papermill": {
     "duration": 0.035146,
     "end_time": "2024-06-24T16:12:47.843560",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.808414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,\n",
       "       1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0,\n",
       "       0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n",
       "       0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n",
       "       1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,\n",
       "       0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,\n",
       "       1, 0, 0, 1])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "986bb218",
   "metadata": {
    "papermill": {
     "duration": 0.020201,
     "end_time": "2024-06-24T16:12:47.884509",
     "exception": false,
     "start_time": "2024-06-24T16:12:47.864308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.028525,
   "end_time": "2024-06-24T16:12:48.628845",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-24T16:12:35.600320",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
